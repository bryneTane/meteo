{"version":3,"sources":["components/Weather.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Weather","icon","temp","city","country","tmax","tmin","this","props","weath","main","name","sys","temp_max","temp_min","react_default","a","createElement","style","width","src","weather","alt","className","Component","API_KEY","Search","state","print","dataR","getWeather","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","console","log","target","elements","value","fetch","concat","sent","json","_this","setState","abrupt","stop","onSubmit","type","placeholder","Weather_Weather","tabs","title","sub","TabExample","es","initialPage","tabBarPosition","renderTab","tab","Search_Search","App","isLoading","componentWillMount","getWeatherLocation","location","navigator","geolocation","getCurrentPosition","_ref","Object","asyncToGenerator","mark","position","lat","coords","latitude","lon","longitude","_x","apply","arguments","Halogenium","color","size","margin","App_TabExample","backgroundColor","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a1a94ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../css/Weather.css'\r\n\r\nexport default class Weather extends Component{\r\n\r\n    render(){\r\n        let temp = 0;\r\n        let city = '';\r\n        let country = '';\r\n        let tmax = 0;\r\n        let tmin = 0;\r\n        let icon;\r\n        if(this.props.weath.main){\r\n            temp = this.props.weath.main.temp;\r\n            city = this.props.weath.name;\r\n            country = this.props.weath.sys.country;\r\n            tmax = this.props.weath.main.temp_max;\r\n            tmin = this.props.weath.main.temp_min;\r\n            icon = <img style={{width: \"7rem\"}} src={\"https://openweathermap.org/img/w/\"+ this.props.weath.weather[0].icon + \".png\"} alt=\"Erreur\" />\r\n        } \r\n        return(\r\n            <div className=\"meteo\">\r\n                <h1>{city + ', ' + country}</h1><br/>\r\n                {icon}\r\n                <h1 className='temp'>T° : {temp + '°C'}</h1>\r\n                <h3>{'max : ' + tmax + '°C - ' + 'min : ' + tmin + '°C'}</h3>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Weather from './Weather';\r\nimport '../css/Search.css';\r\n\r\nconst API_KEY = \"048db27144dd27979e58a847bf45db60\";\r\n\r\nexport default class Search extends Component{\r\n\r\n    state = {print: false, dataR: {}};\r\n\r\n    getWeather = async(e) => {\r\n        e.preventDefault();\r\n        console.log(e.target)\r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n        const data = await api_call.json();\r\n        this.setState({dataR: data});\r\n        this.setState({print: true});\r\n        console.log(data);\r\n        return data;\r\n      }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit = {this.getWeather}>\r\n                    <div><input type=\"text\" name=\"city\" placeholder=\"City...\" /></div>\r\n                    <div><input type=\"text\" name=\"country\" placeholder=\"Country...\" /></div>\r\n                    <div><button>Get Weather</button></div>\r\n                </form>\r\n                {this.state.print && <Weather weath={this.state.dataR} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport {SyncLoader as Loader} from 'halogenium';\r\n//import {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport Search from './components/Search';\r\nimport Weather from './components/Weather';\r\nimport { Tabs } from 'antd-mobile';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\n\r\nconst tabs = [\r\n  { title: 'Votre Météo', sub: '1' },\r\n  { title: 'Recherche', sub: '2' },\r\n];\r\n\r\nconst TabExample = (props) => (\r\n  <div>\r\n    <Tabs tabs={tabs}\r\n      initialPage={1}\r\n      tabBarPosition=\"top\"\r\n      renderTab={tab => <span className=\"title\">{tab.title}</span>}\r\n    >\r\n      <div className = \"tabContent\">\r\n        <Weather weath={props.weath} />\r\n      </div>\r\n      <div className = \"tabContent\">\r\n        <Search  />\r\n      </div>\r\n    </Tabs>\r\n \r\n  </div>\r\n);\r\n\r\nclass App extends Component {\r\n\r\n  state = { isLoading: true, dataR: {} };\r\n\r\n  componentWillMount = () => {\r\n\r\n      this.getWeatherLocation();\r\n      this.setState({isLoading: false})\r\n  }\r\n\r\n  getWeatherLocation = () => {\r\n    let location = {};\r\n    if(navigator.geolocation){\r\n      return navigator.geolocation.getCurrentPosition(async(position) => {\r\n        location = {\r\n          lat: position.coords.latitude,\r\n          lon: position.coords.longitude\r\n        };\r\n        console.log(location);\r\n        const api_call = await fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\"+location.lat+\"&lon=\"+location.lon+\"&units=metric&appid=0fcea7ccb9d81829009c5835be2cdb9d\");\r\n        const data = await api_call.json();\r\n        console.log(data);\r\n        this.setState({dataR: data});\r\n        return data;\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    if(this.state.isLoading) return(\r\n     <div>\r\n        <div className='header'>\r\n          My Weather\r\n        </div>\r\n        <Loader color=\"#26A65B\" size=\"16px\" margin=\"4px\" />\r\n     </div>\r\n    );\r\n    return (\r\n      <div>\r\n        <div className='header'>\r\n          My Weather\r\n        </div>\r\n        <TabExample weath={this.state.dataR} style={{backgroundColor: \"rgb(63, 58, 58)\"}} />\r\n        <div className='footer'>\r\n          Copyrigths &#169; Friedrich TANE \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}